buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
        springCloudConnectorsVersion = '1.2.2.RELEASE'
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

version = '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {

    all {
        exclude module: 'commons-logging'
        exclude module: 'log4j'
        exclude module: 'slf4j-log4j12'
        exclude group: 'ch.qos.logback'
    }
}

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
}

dependencies {
    // App
    compile "com.google.guava:guava:19.0"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "commons-io:commons-io:2.4"

    // Spring Boot
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"

    // Spring Cloud Connectors
    compile "org.springframework.cloud:spring-cloud-core:${springCloudConnectorsVersion}"
    compile "org.springframework.cloud:spring-cloud-spring-service-connector:${springCloudConnectorsVersion}"
    compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:${springCloudConnectorsVersion}"

    // JPA Persistence
//    compile "commons-dbcp:commons-dbcp"
    runtime "com.h2database:h2"
    runtime "mysql:mysql-connector-java"

    // Testing
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile "junit:junit"
}

jar {
    baseName = "pokemon-go-team-support"
    version = "" // omit the version from the war file name
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

idea.module {
    jdkName = '1.8'
    excludeDirs += file('out')
    excludeDirs += file('build')
    excludeDirs += file('.gradle')
    excludeDirs += file('gradle')

    iml.withXml {
        def testAtts = it.asNode().component.content.sourceFolder
                .find { it.@url == 'file://$MODULE_DIR$/src/test/resources' }?.attributes()
        testAtts?.remove('isTestSource')
        testAtts?.put('type', 'java-test-resource')

        def srcAtts = it.asNode().component.content.sourceFolder
                .find { it.@url == 'file://$MODULE_DIR$/src/main/resources' }?.attributes()
        srcAtts?.remove('isTestSource')
        srcAtts?.put('type', 'java-resource')
    }
}

idea.project {
    jdkName = '1.8'
    languageLevel = '1.8'
    vcs = 'Git'

//    ipr.withXml { provider ->
//        def node = provider.asNode()
//        node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
//    }
}
